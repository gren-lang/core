module Test.Maybe exposing (tests)

import Basics exposing (..)
import Expect
import Maybe exposing (..)
import Test exposing (..)
import Math


isOdd : Int -> Bool
isOdd n =
    Math.remainderBy 2 n /= 0


tests : Test
tests =
    describe "Maybe Tests"
        [ describe "Query"
            [ describe "hasValue"
                [ test "True case" <|
                    \{} -> Expect.equal True (Maybe.hasValue 5 (Just 5))
                , test "False case" <|
                    \{} -> Expect.equal False (Maybe.hasValue 5 (Just 3))
                , test "Nothing" <|
                    \{} -> Expect.equal False (Maybe.hasValue 5 Nothing)
                ]
            , describe "checkValue"
                [ test "True case" <|
                    \{} -> Expect.equal True (Maybe.checkValue isOdd (Just 5))
                , test "False case" <|
                    \{} -> Expect.equal False (Maybe.checkValue isOdd (Just 2))
                , test "Nothing" <|
                    \{} -> Expect.equal False (Maybe.checkValue isOdd Nothing)
                ]
            ]
        , describe "Transform"
            [ describe "withDefault"
                [ test "no default used" <|
                    \{} -> Expect.equal 0 (Maybe.withDefault 5 (Just 0))
                , test "default used" <|
                    \{} -> Expect.equal 5 (Maybe.withDefault 5 Nothing)
                ]
            , describe "withDefaultLazy"
                [ test "no default used" <|
                    \{} -> Expect.equal 0 (Maybe.withDefaultLazy (\{} -> 5) (Just 0))
                , test "default used" <|
                    \{} -> Expect.equal 5 (Maybe.withDefaultLazy (\{} -> 5) Nothing)
                ]
            , describe "map"
                (let
                    f =
                        \n -> n + 1
                 in
                 [ test "on Just" <|
                    \{} ->
                        Expect.equal
                            (Just 1)
                            (Maybe.map f (Just 0))
                 , test "on Nothing" <|
                    \{} ->
                        Expect.equal
                            Nothing
                            (Maybe.map f Nothing)
                 ]
                )
            , describe "map2"
                (let
                    f =
                        (+)
                 in
                 [ test "on (Just, Just)" <|
                    \{} ->
                        Expect.equal
                            (Just 1)
                            (Maybe.map2 f (Just 0) (Just 1))
                 , test "on (Just, Nothing)" <|
                    \{} ->
                        Expect.equal
                            Nothing
                            (Maybe.map2 f (Just 0) Nothing)
                 , test "on (Nothing, Just)" <|
                    \{} ->
                        Expect.equal
                            Nothing
                            (Maybe.map2 f Nothing (Just 0))
                 ]
                )
            , describe "map3"
                (let
                    f =
                        \a b c -> a + b + c
                 in
                 [ test "on (Just, Just, Just)" <|
                    \{} ->
                        Expect.equal
                            (Just 3)
                            (Maybe.map3 f (Just 1) (Just 1) (Just 1))
                 , test "on (Just, Just, Nothing)" <|
                    \{} ->
                        Expect.equal
                            Nothing
                            (Maybe.map3 f (Just 1) (Just 1) Nothing)
                 , test "on (Just, Nothing, Just)" <|
                    \{} ->
                        Expect.equal
                            Nothing
                            (Maybe.map3 f (Just 1) Nothing (Just 1))
                 , test "on (Nothing, Just, Just)" <|
                    \{} ->
                        Expect.equal
                            Nothing
                            (Maybe.map3 f Nothing (Just 1) (Just 1))
                 ]
                )
            , describe "map4"
                (let
                    f a b c d =
                        a + b + c + d

                    map4 fn a b c d =
                        Just fn
                            |> Maybe.andMap a
                            |> Maybe.andMap b
                            |> Maybe.andMap c
                            |> Maybe.andMap d
                 in
                 [ test "on (Just, Just, Just, Just)" <|
                    \{} ->
                        Expect.equal
                            (Just 4)
                            (map4 f (Just 1) (Just 1) (Just 1) (Just 1))
                 , test "on (Just, Just, Just, Nothing)" <|
                    \{} ->
                        Expect.equal
                            Nothing
                            (map4 f (Just 1) (Just 1) (Just 1) Nothing)
                 , test "on (Just, Just, Nothing, Just)" <|
                    \{} ->
                        Expect.equal
                            Nothing
                            (map4 f (Just 1) (Just 1) Nothing (Just 1))
                 , test "on (Just, Nothing, Just, Just)" <|
                    \{} ->
                        Expect.equal
                            Nothing
                            (map4 f (Just 1) Nothing (Just 1) (Just 1))
                 , test "on (Nothing, Just, Just, Just)" <|
                    \{} ->
                        Expect.equal
                            Nothing
                            (map4 f Nothing (Just 1) (Just 1) (Just 1))
                 ]
                )
            , describe "keepIf"
                [ test "Success" <| \{} ->
                    Expect.equal (Just 5) (Maybe.keepIf isOdd (Just 5))
                , test "Failure" <| \{} ->
                    Expect.equal Nothing (Maybe.keepIf isOdd (Just 4))
                ]
            , describe "andThen"
                [ test "succeeding chain" <|
                    \{} ->
                        Expect.equal
                            (Just 1)
                            (Maybe.andThen (\a -> Just a) (Just 1))
                , test "failing chain (original Maybe failed)" <|
                    \{} ->
                        Expect.equal
                            Nothing
                            (Maybe.andThen (\a -> Just a) Nothing)
                , test "failing chain (chained function failed)" <|
                    \{} ->
                        Expect.equal
                            Nothing
                            (Maybe.andThen (\a -> Nothing) (Just 1))
                ]
            ]
        ]
