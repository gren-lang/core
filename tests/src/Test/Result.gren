module Test.Result exposing (tests)

import Basics exposing (..)
import Math
import Expect
import Result exposing (Result(..))
import String
import Test exposing (..)


isEven n =
    if Math.modBy 2 n == 0 then
        Ok n

    else
        Err "number is odd"


toIntResult : String -> Result String Int
toIntResult s =
    when String.toInt s is
        Just i ->
            Ok i

        Nothing ->
            Err <| "could not convert string '" ++ s ++ "' to an Int"


add3 a b c =
    a + b + c


add4 a b c d =
    a + b + c + d


tests : Test
tests =
    describe "Result"
        [ describe "firstOk"
            [ test "Ok" <| \{} -> Expect.equal (Just 5) (Result.firstOk [ Ok 5, Err 0, Ok 10 ])
            , test "Err" <| \{} -> Expect.equal Nothing (Result.firstOk [ Err 1, Err 2, Err 3 ])
            ]
        , describe "allOk"
            [ test "Ok" <| \{} -> Expect.equal (Ok [ 0, 1 ]) (Result.allOk [ Ok 0, Ok 1 ])
            , test "Err" <| \{} -> Expect.equal (Err [ 0 ]) (Result.allOk [ Ok 5, Err 0, Ok 10 ])
            ]
        , describe "map"
            [ test "Ok" <| \{} -> Expect.equal (Ok 3) (Result.map ((+) 1) (Ok 2))
            , test "Err" <| \{} -> Expect.equal (Err "error") (Result.map ((+) 1) (Err "error"))
            ]
        , describe "mapN"
            [ test "map2 Ok" <| \{} -> Expect.equal (Ok 3) (Result.map2 (+) (Ok 1) (Ok 2))
            , test "map2 Err" <| \{} -> Expect.equal (Err "x") (Result.map2 (+) (Ok 1) (Err "x"))
            , test "map3 Ok" <| \{} -> Expect.equal (Ok 6) (Result.map3 add3 (Ok 1) (Ok 2) (Ok 3))
            , test "map3 Err" <| \{} -> Expect.equal (Err "x") (Result.map3 add3 (Ok 1) (Ok 2) (Err "x"))
            , test "andMap Ok" <| \{} -> Expect.equal (Ok 10) (Ok add4 |> Result.andMap (Ok 1) |> Result.andMap (Ok 2) |> Result.andMap (Ok 3) |> Result.andMap (Ok 4))
            , test "andMap Err" <| \{} -> Expect.equal (Err "x") (Ok add4 |> Result.andMap (Ok 1) |> Result.andMap (Ok 2) |> Result.andMap (Ok 3) |> Result.andMap (Err "x"))
            ]
        , describe "andThen"
            [ test "andThen Ok" <| \{} -> Expect.equal (Ok 42) (toIntResult "42" |> Result.andThen isEven)
            , test "andThen first Err" <|
                \{} ->
                    Expect.equal
                        (Err "could not convert string '4.2' to an Int")
                        (toIntResult "4.2" |> Result.andThen isEven)
            , test "andThen second Err" <|
                \{} ->
                    Expect.equal
                        (Err "number is odd")
                        (toIntResult "41" |> Result.andThen isEven)
            ]
        , describe "onError"
            [ test "Ok" <|
                \{} -> 
                    Expect.equal 
                        (Ok 42) 
                        (toIntResult "42" |> Result.onError (\_ -> Ok 0))
            , test "Err" <|
                \{} ->
                    Expect.equal
                        (Ok 0)
                        (toIntResult "4.2" |> Result.onError (\_ -> Ok 0))
            ]
        ]
