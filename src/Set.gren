module Set(Key : Comparable) exposing
    ( Set
    , empty, singleton, insert, remove
    , isEmpty, member, size
    , union, intersect, diff
    , toArray, fromArray
    , map, foldl, foldr, filter, partition
    )

{-| A set of unique values. The values can be any comparable type. This
includes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or lists
of comparable types.

Insert, remove, and query operations all take _O(log n)_ time.


# Sets

@docs Set


# Build

@docs empty, singleton, insert, remove


# Query

@docs isEmpty, member, size


# Combine

@docs union, intersect, diff


# Arrays

@docs toArray, fromArray


# Transform

@docs map, foldl, foldr, filter, partition

-}

import Array exposing (Array)
import Basics exposing (Bool, Int)
import Dict
import Maybe exposing (Maybe(..))


{-| Represents a set of unique values. So `(Set Int)` is a set of integers and
`(Set String)` is a set of strings.
-}
type Set t
    = Set_gren_builtin (Dict.Dict t {})


{-| Create an empty set.
-}
empty : Set a
empty =
    Set_gren_builtin Dict.empty


{-| Create a set with one value.
-}
singleton : Key.comparable -> Set Key.comparable
singleton key =
    Set_gren_builtin (Dict.singleton key {})


{-| Insert a value into a set.
-}
insert : Key.comparable -> Set Key.comparable -> Set Key.comparable
insert key (Set_gren_builtin dict) =
    Set_gren_builtin (Dict.insert key {} dict)


{-| Remove a value from a set. If the value is not found, no changes are made.
-}
remove : Key.comparable -> Set Key.comparable -> Set Key.comparable
remove key (Set_gren_builtin dict) =
    Set_gren_builtin (Dict.remove key dict)


{-| Determine if a set is empty.
-}
isEmpty : Set a -> Bool
isEmpty (Set_gren_builtin dict) =
    Dict.isEmpty dict


{-| Determine if a value is in a set.
-}
member : Key.comparable -> Set Key.comparable -> Bool
member key (Set_gren_builtin dict) =
    Dict.member key dict


{-| Determine the number of elements in a set.
-}
size : Set a -> Int
size (Set_gren_builtin dict) =
    Dict.size dict


{-| Get the union of two sets. Keep all values.
-}
union : Set Key.comparable -> Set Key.comparable -> Set Key.comparable
union (Set_gren_builtin dict1) (Set_gren_builtin dict2) =
    Set_gren_builtin (Dict.union dict1 dict2)


{-| Get the intersection of two sets. Keeps values that appear in both sets.
-}
intersect : Set Key.comparable -> Set Key.comparable -> Set Key.comparable
intersect (Set_gren_builtin dict1) (Set_gren_builtin dict2) =
    Set_gren_builtin (Dict.intersect dict1 dict2)


{-| Get the difference between the first set and the second. Keeps values
that do not appear in the second set.
-}
diff : Set Key.comparable -> Set Key.comparable -> Set Key.comparable
diff (Set_gren_builtin dict1) (Set_gren_builtin dict2) =
    Set_gren_builtin (Dict.diff dict1 dict2)


{-| Convert a set into a list, sorted from lowest to highest.
-}
toArray : Set a -> Array a
toArray (Set_gren_builtin dict) =
    Dict.keys dict


{-| Convert a list into a set, removing any duplicates.
-}
fromArray : Array Key.comparable -> Set Key.comparable
fromArray list =
    Array.foldl insert empty list


{-| Fold over the values in a set, in order from lowest to highest.
-}
foldl : (a -> b -> b) -> b -> Set a -> b
foldl func initialState (Set_gren_builtin dict) =
    Dict.foldl (\key _ state -> func key state) initialState dict


{-| Fold over the values in a set, in order from highest to lowest.
-}
foldr : (a -> b -> b) -> b -> Set a -> b
foldr func initialState (Set_gren_builtin dict) =
    Dict.foldr (\key _ state -> func key state) initialState dict


{-| Only keep elements that pass the given test.

    import Set exposing (Set)

    numbers : Set Int
    numbers =
        Set.fromArray [ -2, -1, 0, 1, 2 ]

    positives : Set Int
    positives =
        Set.filter (\x -> x > 0) numbers

    -- positives == Set.fromArray [1,2]

-}
filter : (Key.comparable -> Bool) -> Set Key.comparable -> Set Key.comparable
filter isGood (Set_gren_builtin dict) =
    Set_gren_builtin (Dict.filter (\key _ -> isGood key) dict)


{-| Create two new sets. The first contains all the elements that passed the
given test, and the second contains all the elements that did not.
-}
partition : (Key.comparable -> Bool) -> Set Key.comparable -> { trues : Set Key.comparable, falses : Set Key.comparable }
partition isGood (Set_gren_builtin dict) =
    let
        { trues, falses } =
            Dict.partition (\key _ -> isGood key) dict
    in
    { trues = Set_gren_builtin trues
    , falses = Set_gren_builtin falses
    }
