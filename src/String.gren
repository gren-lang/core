module String exposing
    ( String, isEmpty, count, reverse, repeat, replace
    , prepend, append, split, join, words, lines
    , slice, takeFirst, takeLast, dropFirst, dropLast
    , contains, startsWith, endsWith, firstIndexOf, lastIndexOf, indices
    , toInt, fromInt
    , toFloat, fromFloat
    , fromChar, pushFirst, pushLast, popFirst, popLast
    , toArray, fromArray
    , toUpper, toLower, pad, padLeft, padRight, trim, trimLeft, trimRight
    , map, keepIf, foldl, foldr, any, all
    , unitLength, getUnit, foldlUnits, foldrUnits, sliceUnits
    )

{-| A built-in representation for efficient string manipulation. When it comes to strings,
there are three concepts worth knowing about:

* Code units: represents the smallest primitive value of a string. In Gren,
code units are represented by a 16-bit value. This is enough to store the most common
characters in western languages (Latin, Greek, Cyrilic), but not all unicode characters.
* Code points: represents a unicode character. Code points can be represented by one
unit, or a pair of units.
* Graphemes: represents a single visual glyph, like certain emojis or characters with
accents.

Unless otherwise noted, all functions in this module deal with code points.


@docs String, isEmpty, count, reverse, repeat, replace


## Building and Splitting

@docs prepend, append, split, join, words, lines


## Get Substrings

@docs slice, takeFirst, takeLast, dropFirst, dropLast


## Check for Substrings

@docs contains, startsWith, endsWith, firstIndexOf, lastIndexOf, indices


## Int Conversions

@docs toInt, fromInt


## Float Conversions

@docs toFloat, fromFloat


## Char Conversions

@docs fromChar, pushFirst, pushLast, popFirst, popLast


## Array Conversions

@docs toArray, fromArray


## Formatting

Cosmetic operations such as padding with extra characters or trimming whitespace.

@docs toUpper, toLower, pad, padLeft, padRight, trim, trimLeft, trimRight

## Higher-Order Functions

@docs map, keepIf, foldl, foldr, any, all

## Char Units

Functions that operates on units instead of code points.

@docs unitLength, getUnit, foldlUnits, foldrUnits, sliceUnits

-}

import Array exposing (Array)
import Basics exposing (..)
import Math exposing (floor, ceiling)
import Bitwise
import Char exposing (Char)
import Gren.Kernel.String
import Maybe exposing (Maybe)
import Result exposing (Result)



-- STRINGS


{-| A `String` is a chunk of text. `String` literals are enclosed in `"double quotes"`.

    "Hello!"

    "How are you?"

    "ðŸ™ˆðŸ™‰ðŸ™Š"

    -- strings with escape characters
    "this\n\t\"that\""

    "ðŸ™ˆðŸ™‰ðŸ™Š" -- "ðŸ™ˆðŸ™‰ðŸ™Š"

    -- multiline strings
    """Triple double quotes let you
    create "multiline strings" which
    can have unescaped quotes and newlines.
    """

A `String` can represent any sequence of [unicode characters][u]. You can use
the unicode escapes from `\u{0000}` to `\u{10FFFF}` to represent characters
by their code point. You can also include the unicode characters directly.
Using the escapes can be better if you need one of the many whitespace
characters with different widths.

[u]: https://en.wikipedia.org/wiki/Unicode

**Note:** JavaScript lets you use double quotes and single quotes interchangably.
This is not true in Gren. You must use double quotes for a `String`, and you must
use single quotes for a [`Char`](Char#Char).

-}
type String
    = String -- NOTE: The compiler provides the real implementation.


{-| Determine if a string is empty.

    isEmpty "" == True

    isEmpty "the world" == False

-}
isEmpty : String -> Bool
isEmpty string =
    string == ""


{-| Count the number of characters in a string.

    count "innumerable" == 11

    count "" == 0

-}
count : String -> Int
count string =
    foldl (\_ num -> num + 1) 0 string


{-| Reverse a string.

    reverse "stressed" == "desserts"

-}
reverse : String -> String
reverse str =
    toArray str
        |> Array.reverse
        |> fromArray


{-| Repeat a string _n_ times.

    repeat 3 "ha" == "hahaha"

-}
repeat : Int -> String -> String
repeat =
    Gren.Kernel.String.repeat


{-| Replace all occurrences of some substring.

    replace "." "-" "Json.Decode.succeed" == "Json-Decode-succeed"

    replace "," "/" "a,b,c,d,e" == "a/b/c/d/e"

**Note:** If you need more advanced replacements, check out the
[`gren-lang/parser`][parser] package or [`String.Regex`][regex] module.

[parser]: /package/gren-lang/parser
[regex]: String.Regex

-}
replace : String -> String -> String -> String
replace before after string =
    join after (split before string)



-- BUILDING AND SPLITTING


{-| Combine two strings. You can also use [the `(++)` operator](Basics#++)
to do this.

    prepend "butter" "fly" == "butterfly"

-}
prepend : String -> String -> String
prepend =
    Gren.Kernel.String.append


{-| Append one string onto another. This is the same operation as [prepend](prepend),
but with the arguments reversed.
    
    append "butter" "fly" == "flybutter"

-}
append : String -> String -> String
append lhs rhs =
    prepend rhs lhs


{-| Split a string using a given separator. If the seperator doesn't appear,
you will get an array containing the original string.

    split "," "" == [""]
    
    split "," "cat" == ["cat"]
    
    split "," "cat,dog,cow" == [ "cat", "dog", "cow" ]
    
    split "/" "home/evan/Desktop/" == [ "home", "evan", "Desktop", "" ]

-}
split : String -> String -> Array String
split =
    Gren.Kernel.String.split


{-| Put many strings together with a given separator.

    join "a" [ "H", "w", "ii", "n" ] == "Hawaiian"

    join " " [ "cat", "dog", "cow" ] == "cat dog cow"

    join "/" [ "home", "evan", "Desktop" ] == "home/evan/Desktop"

-}
join : String -> Array String -> String
join =
    Gren.Kernel.String.join


{-| Break a string into words, splitting on chunks of whitespace.

    words "How are \t you? \n Good?" == [ "How", "are", "you?", "Good?" ]

-}
words : String -> Array String
words =
    Gren.Kernel.String.words


{-| Break a string into lines, splitting on newlines.

    lines "How are you?\nGood?" == [ "How are you?", "Good?" ]

-}
lines : String -> Array String
lines =
    Gren.Kernel.String.lines



-- SUBSTRINGS


{-| Take a substring given a start and end index. Negative indexes
are taken starting from the _end_ of the array.

    slice 7 9 "snakes on a plane!" == "on"

    slice 0 6 "snakes on a plane!" == "snakes"

    slice 0 -7 "snakes on a plane!" == "snakes on a"

    slice -6 -1 "snakes on a plane!" == "plane"

-}
slice : Int -> Int -> String -> String
slice =
    Gren.Kernel.String.slice


{-| Make a new string using the first _n_ characters. If _n_ is larger than
the length of the string, then the string is returned as is.

    takeFirst 2 "Mulder" == "Mu"

    takeFirst 8 "Mulder" == "Mulder"

-}
takeFirst : Int -> String -> String
takeFirst n string =
    if n < 1 then
        ""

    else
        slice 0 n string


{-| Make a new string using the last _n_ characters. If _n_ is larger than
the length of the string, then the string is returned as is.

    takeLast 2 "Scully" == "ly"

    takeLast 8 "Scully" == "Scully"

-}
takeLast : Int -> String -> String
takeLast n string =
    if n < 1 then
        ""

    else
        slice -n (unitLength string) string


{-| Drop the first _n_ characters.

    dropFirst 2 "The Lone Gunmen" == "e Lone Gunmen"

-}
dropFirst : Int -> String -> String
dropFirst n string =
    if n < 1 then
        string

    else
        slice n (unitLength string) string


{-| Drop the last _n_ characters.

    dropLast 2 "Cigarette Smoking Man" == "Cigarette Smoking M"

-}
dropLast : Int -> String -> String
dropLast n string =
    if n < 1 then
        string

    else
        slice 0 -n string



-- DETECT SUBSTRINGS


{-| See if the second string contains the first one.

    contains "the" "theory" == True

    contains "hat" "theory" == False

    contains "THE" "theory" == False

-}
contains : String -> String -> Bool
contains =
    Gren.Kernel.String.contains


{-| See if the second string starts with the first one.

    startsWith "the" "theory" == True

    startsWith "ory" "theory" == False

-}
startsWith : String -> String -> Bool
startsWith =
    Gren.Kernel.String.startsWith


{-| See if the second string ends with the first one.

    endsWith "the" "theory" == False

    endsWith "ory" "theory" == True

-}
endsWith : String -> String -> Bool
endsWith =
    Gren.Kernel.String.endsWith


{-| Find the index of the first string within the second one, if it's there.

    indexOf "the" "theory" == Just 0

    indexOf "ory" "theory" == Just 3
    
    indexOf "a" "theory" == Nothing

-}
firstIndexOf : String -> String -> Maybe Int
firstIndexOf =
    Gren.Kernel.String.indexOf


{-| Find the last index of the first string within the second one, if it's there.

    lastIndexOf "abra" "abracadabra" == Just 7

    lastIndexOf "barb" "abracadabra" == Nothing

-}
lastIndexOf : String -> String -> Maybe Int
lastIndexOf =
    Gren.Kernel.String.lastIndexOf


{-| Get all of the indices for a substring in another string.

    indexes "i" "Mississippi" == [ 1, 4, 7, 10 ]

    indexes "ss" "Mississippi" == [ 2, 5 ]

    indexes "needle" "haystack" == []

-}
indices : String -> String -> Array Int
indices =
    Gren.Kernel.String.indexes



-- FORMATTING


{-| Convert a string to all upper case. Useful for case-insensitive comparisons
and VIRTUAL YELLING.

    toUpper "skinner" == "SKINNER"

-}
toUpper : String -> String
toUpper =
    Gren.Kernel.String.toUpper


{-| Convert a string to all lower case. Useful for case-insensitive comparisons.

    toLower "X-FILES" == "x-files"

-}
toLower : String -> String
toLower =
    Gren.Kernel.String.toLower


{-| Pad a string on both sides until it has a given length.

    pad 5 ' ' "1" == "  1  "

    pad 5 ' ' "11" == "  11 "

    pad 5 ' ' "121" == " 121 "

-}
pad : Int -> Char -> String -> String
pad n char string =
    let
        half =
            Basics.toFloat (n - count string) / 2
    in
    repeat (ceiling half) (fromChar char) ++ string ++ repeat (floor half) (fromChar char)


{-| Pad a string on the left until it has a given length.

    padLeft 5 '.' "1" == "....1"

    padLeft 5 '.' "11" == "...11"

    padLeft 5 '.' "121" == "..121"

-}
padLeft : Int -> Char -> String -> String
padLeft n char string =
    repeat (n - count string) (fromChar char) ++ string


{-| Pad a string on the right until it has a given length.

    padRight 5 '.' "1" == "1...."

    padRight 5 '.' "11" == "11..."

    padRight 5 '.' "121" == "121.."

-}
padRight : Int -> Char -> String -> String
padRight n char string =
    string ++ repeat (n - count string) (fromChar char)


{-| Get rid of whitespace on both sides of a string.

    trim "  hats  \n" == "hats"

-}
trim : String -> String
trim =
    Gren.Kernel.String.trim


{-| Get rid of whitespace on the left of a string.

    trimLeft "  hats  \n" == "hats  \n"

-}
trimLeft : String -> String
trimLeft =
    Gren.Kernel.String.trimLeft


{-| Get rid of whitespace on the right of a string.

    trimRight "  hats  \n" == "  hats"

-}
trimRight : String -> String
trimRight =
    Gren.Kernel.String.trimRight



-- INT CONVERSIONS


{-| Try to convert a string into an int, failing on improperly formatted strings.

    String.toInt "123" == Just 123

    String.toInt "-42" == Just -42

    String.toInt "3.1" == Nothing

    String.toInt "31a" == Nothing

If you are extracting a number from some raw user input, you will typically
want to use [`Maybe.withDefault`](Maybe#withDefault) to handle bad data:

    Maybe.withDefault 0 (String.toInt "42") == 42

    Maybe.withDefault 0 (String.toInt "ab") == 0

-}
toInt : String -> Maybe Int
toInt =
    Gren.Kernel.String.toInt


{-| Convert an `Int` to a `String`.

    String.fromInt 123 == "123"

    String.fromInt -42 == "-42"

Check out [`Debug.toString`](Debug#toString) to convert _any_ value to a string
for debugging purposes.

-}
fromInt : Int -> String
fromInt =
    Gren.Kernel.String.fromNumber



-- FLOAT CONVERSIONS


{-| Try to convert a string into a float, failing on improperly formatted strings.

    String.toFloat "123" == Just 123.0

    String.toFloat "-42" == Just -42.0

    String.toFloat "3.1" == Just 3.1

    String.toFloat "31a" == Nothing

If you are extracting a number from some raw user input, you will typically
want to use [`Maybe.withDefault`](Maybe#withDefault) to handle bad data:

    Maybe.withDefault 0 (String.toFloat "42.5") == 42.5

    Maybe.withDefault 0 (String.toFloat "cats") == 0

-}
toFloat : String -> Maybe Float
toFloat =
    Gren.Kernel.String.toFloat


{-| Convert a `Float` to a `String`.

    String.fromFloat 123 == "123"

    String.fromFloat -42 == "-42"

    String.fromFloat 3.9 == "3.9"

Check out [`Debug.toString`](Debug#toString) to convert _any_ value to a string
for debugging purposes.

-}
fromFloat : Float -> String
fromFloat =
    Gren.Kernel.String.fromNumber



-- ARRAY CONVERSIONS


{-| Convert a string to an array of characters.

    toArray "abc" == [ 'a', 'b', 'c' ]

    toArray "ðŸ™ˆðŸ™‰ðŸ™Š" == [ 'ðŸ™ˆ', 'ðŸ™‰', 'ðŸ™Š' ]

-}
toArray : String -> Array Char
toArray string =
    foldl Array.pushLast [] string


{-| Convert an array of characters into a String.
    
    fromArray [ 'a', 'b', 'c' ] == "abc"

    fromArray [ 'ðŸ™ˆ', 'ðŸ™‰', 'ðŸ™Š' ] == "ðŸ™ˆðŸ™‰ðŸ™Š"

-}
fromArray : Array Char -> String
fromArray =
    Gren.Kernel.String.fromArray



-- CHAR CONVERSIONS


{-| Create a string from a given character.

    fromChar 'a' == "a"

-}
fromChar : Char -> String
fromChar char =
    pushFirst char ""


{-| Add a character to the beginning of a string.

    pushFirst 'T' "he truth is out there" == "The truth is out there"

-}
pushFirst : Char -> String -> String
pushFirst =
    Gren.Kernel.String.pushFirst


{-| Add a character to the end of a string.

    pushLast 'T' "he truth is out there" == "he truth is out thereT"

-}
pushLast : Char -> String -> String
pushLast =
    Gren.Kernel.String.pushLast


{-| Split a non-empty string into its first character and its remaining characters. This lets you
pattern match on strings exactly as you would with arrays.

    popFirst "abc" == Just { first = 'a', rest = "bc" }

    popFirst "" == Nothing

-}
popFirst : String -> Maybe { first : Char, rest : String }
popFirst =
    Gren.Kernel.String.popFirst


{-| Split a non-empty string into its last character and its remaining characters. This lets you
pattern match on strings exactly as you would with arrays.

    popLast "abc" == Just { first = 'c', rest = "ab" }

    popLast "" == Nothing

-}
popLast : String -> Maybe { last : Char, rest : String }
popLast =
    Gren.Kernel.String.popLast


-- HIGHER-ORDER FUNCTIONS


{-| Transform every character in a string

    map
        (\c ->
            if c == '/' then
                '.'

            else
                c
        )
        "a/b/c"
        == "a.b.c"

-}
map : (Char -> Char) -> String -> String
map fn str =
    foldl
        (\char acc ->
            pushLast (fn char) acc
        )
        ""
        str


{-| Keep only the characters that pass the test.

    keepIf isDigit "R2-D2" == "22"

-}
keepIf : (Char -> Bool) -> String -> String
keepIf isGood str =
    foldl
        (\char acc ->
            if isGood char then
                pushLast char acc

            else
                acc
        )
        ""
        str


{-| Reduce a string from the beginning.

    foldl cons "" "time" == "emit"

-}
foldl : (Char -> b -> b) -> b -> String -> b
foldl =
    Gren.Kernel.String.foldl


{-| Reduce a string from the end.

    foldr cons "" "time" == "time"

-}
foldr : (Char -> b -> b) -> b -> String -> b
foldr =
    Gren.Kernel.String.foldr


{-| Determine whether _any_ characters pass the test.

    any isDigit "90210" == True

    any isDigit "R2-D2" == True

    any isDigit "heart" == False

    any isDigit "" == False

-}
any : (Char -> Bool) -> String -> Bool
any =
    Gren.Kernel.String.any


{-| Determine whether _all_ characters pass the test.

    all isDigit "90210" == True

    all isDigit "R2-D2" == False

    all isDigit "heart" == False

    all isDigit "" = True

-}
all : (Char -> Bool) -> String -> Bool
all isGood str =
    not (any (not << isGood) str)


-- UNITS


{-| Get the number of character units in a string. As strings are, essentially,
arrays of character units, this is a constant time operation.
-}
unitLength : String -> Int
unitLength =
    Gren.Kernel.String.unitLength


{-| Retrieve the character unit at a given index, or `Nothing` if the index is out of bounds.
A negative index uses the end of the string as the starting point.

    getUnit 1 "abc" == Just 'b'
    
    getUnit 10 "abc" == Nothing
    
    getUnit -1 "abc" == Just 'c'

-}
getUnit : Int -> String -> Maybe Char
getUnit =
    Gren.Kernel.String.getUnit


{-| Reduce a string from the beginning. The given function will receive character units instead
of a code point, meaning that the provided `Char` could possibly represent one half of a full
character.

    foldlUnits pushFirst "" "time" == "emit"
-}
foldlUnits : (Char -> b -> b) -> b -> String -> b
foldlUnits =
    Gren.Kernel.String.foldlUnits


{-| Reduce a string from the end. The given function will receive character units instead
of a code point, meaning that the provided `Char` could possibly represent one half of a full
character.

    foldrUnits pushFirst "" "time" == "time"
-}
foldrUnits : (Char -> b -> b) -> b -> String -> b
foldrUnits =
    Gren.Kernel.String.foldrUnits

{-| Take a substring given a start and end index. Negative indexes
are taken starting from the _end_ of the array. Indexes refers to character units,
_not_ code points!

    sliceUnits 1 -1 "snakes" == "nake"

    sliceUnits 2 5 "snakes" == "ake"

    sliceUnits 3 5 "hi ðŸ˜Ž there" == "ðŸ˜Ž"
-}
sliceUnits : Int -> Int -> String -> String
sliceUnits =
    Gren.Kernel.String.sliceUnits
