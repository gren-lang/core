module Maybe exposing
    ( Maybe(..)
    , hasValue, checkValue, keepIf
    , withDefault, withDefaultLazy, map, map2, map3, andMap
    , andThen
    )

{-| This library fills a bunch of important niches in Gren. A `Maybe` can help
you with optional arguments, error handling, and records with optional fields.

@docs Maybe


## Queries

@docs hasValue, checkValue, keepIf


## Transform

@docs withDefault, withDefaultLazy, map, map2, map3, andMap, andThen

-}

import Basics exposing (..)


{-| Represent values that may or may not exist. It can be useful if you have a
record field that is only filled in sometimes. Or if a function takes a value
sometimes, but does not absolutely need it.

    -- A person, but maybe we do not know their age.
    type alias Person =
        { name : String
        , age : Maybe Int
        }

    tom =
        { name = "Tom", age = Just 42 }

    sue =
        { name = "Sue", age = Nothing }

-}
type Maybe a
    = Just a
    | Nothing


{-| Checks to see if the [Maybe](#Maybe) is `Just`, and that the contained value
equals a provided constant.

    hasValue 5 (Just 5) == True

    hasValue 5 (Just 3) == False

    hasValue 5 Nothing == False

-}
hasValue : a -> Maybe a -> Bool
hasValue value maybe =
    when maybe is
        Just contained ->
            contained == value

        Nothing ->
            False


{-| Checks to see if the [Maybe](#Maybe) is `Just`, and that the contained value
passes the provided test.

    checkValue isOdd (Just 5) == True

    checkValue isOdd (Just 2) == False

    checkValue isOdd Nothing == False

-}
checkValue : (a -> Bool) -> Maybe a -> Bool
checkValue test maybe =
    when maybe is
        Just contained ->
            test contained

        Nothing ->
            False


{-| Provide a default value, turning an optional value into a normal
value. This comes in handy when paired with functions like
[`Dict.get`](Dict#get) which gives back a `Maybe`.

    withDefault 100 (Just 42) == 42
    
    withDefault 100 Nothing == 100
    
    withDefault "unknown" (Dict.get "Tom" Dict.empty) == "unknown"

-}
withDefault : a -> Maybe a -> a
withDefault default maybe =
    when maybe is
        Just value ->
            value

        Nothing ->
            default


{-| Same as [withDefault](#withDefault) but the default value is wrapped in
a function. This is useful when computing the default value is expensive, as
you can compute it only when it is required.

In most cases you should use pattern matching or [withDefault](#withDefault) instead.

-}
withDefaultLazy : ({} -> a) -> Maybe a -> a
withDefaultLazy default maybe =
    when maybe is
        Just value ->
            value

        Nothing ->
            default {}


{-| Transform a `Maybe` value with a given function:

    map sqrt (Just 9) == Just 3

    map sqrt Nothing == Nothing

    map sqrt (String.toFloat "9") == Just 3

    map sqrt (String.toFloat "x") == Nothing

-}
map : (a -> b) -> Maybe a -> Maybe b
map f maybe =
    when maybe is
        Just value ->
            Just (f value)

        Nothing ->
            Nothing


{-| Apply a function if both arguments are `Just` a value.

    map2 (+) (Just 3) (Just 4) == Just 7

    map2 (+) (Just 3) Nothing == Nothing

    map2 (+) Nothing (Just 4) == Nothing

    map2 (+) (String.toInt "1") (String.toInt "123") == Just 124

    map2 (+) (String.toInt "x") (String.toInt "123") == Nothing

    map2 (+) (String.toInt "1") (String.toInt "1.3") == Nothing

-}
map2 : (a -> b -> value) -> Maybe a -> Maybe b -> Maybe value
map2 func ma mb =
    when ma is
        Nothing ->
            Nothing

        Just a ->
            when mb is
                Nothing ->
                    Nothing

                Just b ->
                    Just (func a b)


{-| Apply a function if all three arguments are `Just` a value.

    map3 (+) (Just 3) (Just 4) (Just 3) == Just 10

    map3 (+) (Just 3) Nothing (Just 3) == Nothing

    map3 (+) Nothing (Just 4) (Just 3) == Nothing

    map3 (+) (String.toInt "1") (String.toInt "123") (String.toInt "4") == Just 128

    map3 (+) (String.toInt "x") (String.toInt "123") (String.toInt "4") == Nothing

-}
map3 : (a -> b -> c -> value) -> Maybe a -> Maybe b -> Maybe c -> Maybe value
map3 func ma mb mc =
    when ma is
        Nothing ->
            Nothing

        Just a ->
            when mb is
                Nothing ->
                    Nothing

                Just b ->
                    when mc is
                        Nothing ->
                            Nothing

                        Just c ->
                            Just (func a b c)


{-| Combine multiple `Maybe`s. Helpful when [map2](#map2) and [map3](#map3) aren't enough.

    Just (\a b c -> a ++ b ++ c)
        |> andMap (Just "one ")
        |> andMap (Just "more ")
        |> andMap (Just "time")
        == (Just "one more time")
-}
andMap : Maybe a -> Maybe (a -> b) -> Maybe b
andMap =
    map2 (|>)


{-| Returns `Nothing` if the contained value doesn't pass the given
test.

    keepIf isOdd (Just 5) == Just 5

    keepIf isOdd (Just 2) == Nothing

-}
keepIf : (a -> Bool) -> Maybe a -> Maybe a
keepIf test maybe =
    when maybe is
        Just contained ->
            if test contained then
                maybe

            else
                Nothing

        Nothing ->
            Nothing


{-| Chain together many computations that may fail. It is helpful to see its
definition:

    andThen : (a -> Maybe b) -> Maybe a -> Maybe b
    andThen callback maybe =
        when maybe is
            Just value ->
                callback value

            Nothing ->
                Nothing

This means we only continue with the callback if things are going well. For
example, say you need to parse some user input as a month:

    parseMonth : String -> Maybe Int
    parseMonth userInput =
        String.toInt userInput
            |> andThen toValidMonth

    toValidMonth : Int -> Maybe Int
    toValidMonth month =
        if 1 <= month && month <= 12 then
            Just month

        else
            Nothing

In the `parseMonth` function, if `String.toInt` produces `Nothing` (because
the `userInput` was not an integer) this entire chain of operations will
short-circuit and result in `Nothing`. If `toValidMonth` results in `Nothing`,
again the chain of computations will result in `Nothing`.

-}
andThen : (a -> Maybe b) -> Maybe a -> Maybe b
andThen callback maybeValue =
    when maybeValue is
        Just value ->
            callback value

        Nothing ->
            Nothing



-- FOR INTERNAL USE ONLY
--
-- Use `when` expressions for this in Gren code!


isJust : Maybe a -> Bool
isJust maybe =
    when maybe is
        Just _ ->
            True

        Nothing ->
            False


destruct : b -> (a -> b) -> Maybe a -> b
destruct default func maybe =
    when maybe is
        Just a ->
            func a

        Nothing ->
            default
