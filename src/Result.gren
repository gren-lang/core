module Result exposing
    ( Result(..)
    , hasValue, checkValue, firstOk, allOk
    , map, map2, map3, andMap
    , andThen, onError
    , withDefault, withDefaultLazy, toMaybe, fromMaybe, mapError
    )

{-| A `Result` is the result of a computation that may fail. This is a great
way to manage errors in Gren.

@docs Result


## Query

@docs hasValue, checkValue, firstOk, allOk


## Mapping

@docs map, map2, map3, andMap


## Chaining

@docs andThen, onError


## Handling Errors

@docs withDefault, withDefaultLazy, toMaybe, fromMaybe, mapError

-}

import Basics exposing (..)
import Maybe exposing (Maybe(..))
import Array exposing (Array)


{-| A `Result` is either `Ok` meaning the computation succeeded, or it is an
`Err` meaning that there was some failure.
-}
type Result error value
    = Ok value
    | Err error


{-| If the result is `Ok` check if the contained value matches the provided value.

    Result.hasValue 123 (Ok 123) == True

    Result.hasValue 123 (Ok 5) == False
    
    Result.hasValue 123 (Err "failed") == False

-}
hasValue : a -> Result x a -> Bool
hasValue value result =
    when result is
        Ok a ->
            a == value

        Err _ ->
            False


{-| If the result is `Ok` check if the contained value passes the provided test.

    Result.checkValue isOdd (Ok 5) == True

    Result.checkValue isOdd (Ok 12) == False
    
    Result.checkValue isOdd (Err "failed") == False

-}
checkValue : (a -> Bool) -> Result x a -> Bool
checkValue test result =
    when result is
        Ok a ->
            test a 

        Err _ ->
            False


{-| Returns the first `Ok` value in an `Array` of `Result`s.

    Result.firstOk [ Ok 5, Err 0, Ok 10 ] == Just 5

    Result.firstOk [ Err 0, Err 1 ] == Nothing

-}
firstOk : Array (Result x a) -> Maybe a
firstOk array =
    Array.findFirst isOk array
        |> Maybe.map .value
        |> Maybe.andThen toMaybe


{-| Convert an `Array` of `Result err ok` to `Result (Array err) (Array ok)`. You'll only
receive an `Ok` if there are no `Err` values in the `Array`.

    Result.allOk [ Ok 5, Err 0, Ok 10 ] == Err [ 0 ]

    Result.allOk [ Ok 0, Ok 1 ] == Ok [ 0, 1 ]

-}
allOk : Array (Result err ok) -> Result (Array err) (Array ok)
allOk array =
    let
        errors =
            Array.mapAndKeepJust errToMaybe array
    in
    if Array.length errors > 0 then
        Err errors

    else
        Ok <| Array.mapAndKeepJust toMaybe array


errToMaybe : Result err ok -> Maybe err
errToMaybe result =
    when result is
        Ok _ ->
            Nothing

        Err err ->
            Just err


{-| If the result is `Ok` return the value, but if the result is an `Err` then
return a given default value. The following examples try to parse integers.

    Result.withDefault 0 (Ok 123) == 123

    Result.withDefault 0 (Err "no") == 0

-}
withDefault : a -> Result x a -> a
withDefault def result =
    when result is
        Ok a ->
            a

        Err _ ->
            def


{-| Same as [withDefault](#withDefault) but the default value is provided by a function.
This lets you avoid computing the default value if it isn't necessary.

-}
withDefaultLazy : ({} -> a) -> Result x a -> a
withDefaultLazy provider result =
    when result is
        Ok a ->
            a

        Err _ ->
            provider {}


{-| Apply a function to a result. If the result is `Ok`, it will be converted.
If the result is an `Err`, the same error value will propagate through.

    map sqrt (Ok 4.0) == Ok 2.0

    map sqrt (Err "bad input") == Err "bad input"

-}
map : (a -> value) -> Result x a -> Result x value
map func ra =
    when ra is
        Ok a ->
            Ok (func a)

        Err e ->
            Err e


{-| Apply a function if both results are `Ok`. If not, the first `Err` will
propagate through.

    map2 max (Ok 42) (Ok 13) == Ok 42

    map2 max (Err "x") (Ok 13) == Err "x"

    map2 max (Ok 42) (Err "y") == Err "y"

    map2 max (Err "x") (Err "y") == Err "x"

This can be useful if you have two computations that may fail, and you want
to put them together quickly.

-}
map2 : (a -> b -> value) -> Result x a -> Result x b -> Result x value
map2 func ra rb =
    when ra is
        Err x ->
            Err x

        Ok a ->
            when rb is
                Err x ->
                    Err x

                Ok b ->
                    Ok (func a b)


{-| Apply a function if three results are `Ok`. If not, the first `Err` will
propagate through.

    map3 (+) (Ok 1) (Ok 3) (Ok 5) == Ok 9

    map3 (+) (Err "x") (Ok 3) (Ok 5) == Err "x"

    map3 (+) (Ok 1) (Err "y") (Ok 5) == Err "y"

This can be useful if you have three computations that may fail, and you want
to put them together quickly.
-}
map3 : (a -> b -> c -> value) -> Result x a -> Result x b -> Result x c -> Result x value
map3 func ra rb rc =
    when ra is
        Err x ->
            Err x

        Ok a ->
            when rb is
                Err x ->
                    Err x

                Ok b ->
                    when rc is
                        Err x ->
                            Err x

                        Ok c ->
                            Ok (func a b c)


{-| This function lets you map over multiple values. Useful when [map2](#map2) and [map3](#map3)
aren't enough.

    Ok (\one two three four -> one + two + three + four)
        |> andMap (Ok 1)
        |> andMap (Ok 2)
        |> andMap (Ok 3)
        |> andMap (Ok 4)
        == Ok 10
-}
andMap : Result x a -> Result x (a -> b) -> Result x b
andMap =
    map2 (|>)


{-| Chain together a sequence of computations that may fail. It is helpful
to see its definition:

    andThen : (a -> Result e b) -> Result e a -> Result e b
    andThen callback result =
        when result is
            Ok value ->
                callback value

            Err msg ->
                Err msg

This means we only continue with the callback if things are going well. For
example, say you need to use (`toInt : String -> Result String Int`) to parse
a month and make sure it is between 1 and 12:


    toValidMonth : Int -> Result String Int
    toValidMonth month =
        if month >= 1 && month <= 12 then
            Ok month

        else
            Err "months must be between 1 and 12"

    toMonth : String -> Result String Int
    toMonth rawString =
        toInt rawString
            |> andThen toValidMonth

    -- toMonth "4" == Ok 4
    -- toMonth "9" == Ok 9
    -- toMonth "a" == Err "cannot parse to an Int"
    -- toMonth "0" == Err "months must be between 1 and 12"

This allows us to come out of a chain of operations with quite a specific error
message. It is often best to create a custom type that explicitly represents
the exact ways your computation may fail. This way it is easy to handle in your
code.

-}
andThen : (a -> Result x b) -> Result x a -> Result x b
andThen callback result =
    when result is
        Ok value ->
            callback value

        Err msg ->
            Err msg


{-| This is similar to [andThen](#andThen) but the callback is triggered when
the `Result` is an `Err` value. This gives you the option of dealing with errors
in a chain.

    toInt "a"
        |> onError (\_msg -> Ok 1) -- defaulting to first month of the year
        |> andThen toValidMonth

-}
onError : (a -> Result b x) -> Result a x -> Result b x
onError callback result =
    when result is
        Ok value ->
            Ok value

        Err err ->
            callback err


{-| Transform an `Err` value. For example, say the errors we get have too much
information:

    parseInt : String -> Result ParseError Int

    type alias ParseError =
        { message : String
        , code : Int
        , position : (Int,Int)
        }

    mapError .message (parseInt "123") == Ok 123
    mapError .message (parseInt "abc") == Err "char 'a' is not a number"

-}
mapError : (x -> y) -> Result x a -> Result y a
mapError f result =
    when result is
        Ok v ->
            Ok v

        Err e ->
            Err (f e)


{-| Convert to a simpler `Maybe` if the actual error message is not needed or
you need to interact with some code that primarily uses maybes.

    parseInt : String -> Result ParseError Int

    maybeParseInt : String -> Maybe Int
    maybeParseInt string =
        toMaybe (parseInt string)

-}
toMaybe : Result x a -> Maybe a
toMaybe result =
    when result is
        Ok v ->
            Just v

        Err _ ->
            Nothing


{-| Convert from a simple `Maybe` to interact with some code that primarily
uses `Results`.

    parseInt : String -> Maybe Int

    resultParseInt : String -> Result String Int
    resultParseInt string =
        fromMaybe ("error parsing string: " ++ toString string) (parseInt string)

-}
fromMaybe : x -> Maybe a -> Result x a
fromMaybe err maybe =
    when maybe is
        Just v ->
            Ok v

        Nothing ->
            Err err



-- FOR INTERNAL USE ONLY
--
-- Use `when` expressions for this in Gren code!


isOk : Result x a -> Bool
isOk result =
    when result is
        Ok _ ->
            True

        Err _ ->
            False
